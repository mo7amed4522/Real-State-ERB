version: '3.8'

services:
  # API Gateway (Nginx)
  api-gateway:
    build: ./api-gateway
    ports:
      - "80:80"
    depends_on:
      - nodejs-service
      - go-service
      - python-ai-service

  # Node.js Service (NestJS)
  nodejs-service:
    build:
      context: ./nodejs-service
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "3000"
    volumes:
      - ./nodejs-service:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - ENCRYPTION_SECRET_KEY=${ENCRYPTION_SECRET_KEY}

  # Go Service (Gin)
  go-service:
    build:
      context: ./go-service
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "8080"
    volumes:
      - ./go-service:/app
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=${DATABASE_URL}

  # Python AI Service (FastAPI)
  python-ai-service:
    build:
      context: ./python-ai-service
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "8000"
    volumes:
      - ./python-ai-service:/app
    depends_on:
      - postgres
      - kafka
    environment:
      - DATABASE_URL=${PYTHON_DATABASE_URL}
      - ENCRYPTION_KEY=${PYTHON_ENCRYPTION_KEY}

  # Python Translate Service
  python-translate-service:
    build:
      context: ./python-ai-service
      dockerfile: Dockerfile
    env_file: ./.env
    command: uvicorn translate_service:app --host 0.0.0.0 --port 8010
    ports:
      - "8010:8010"
    volumes:
      - ./python-ai-service:/app
    depends_on:
      - postgres
      - kafka
    environment:
      - DATABASE_URL=${PYTHON_DATABASE_URL}

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    env_file: ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4
    env_file: ./.env
    ports:
      - "8888:80"
    depends_on:
      - postgres
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Apache Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  postgres_data:
  pgadmin_data: 